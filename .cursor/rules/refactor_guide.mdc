---
description:
globs:
alwaysApply: false
---
# Refactoring Guide: UE5 Blueprint Parser

This document outlines the architectural principles for refactoring the UE5 Blueprint Parser. The primary goal is to create a modular, extensible system for converting `.uasset` blueprint text into a human-readable format, mainly for consumption by Large Language Models (LLMs).

## Core Architecture

The system is divided into four distinct layers:

1.  **Data Models (`parser/models.py`)**:
    *   Defines the core data structures.
    *   The primary class is `BlueprintNode`, implemented as a Python `@dataclass`. It represents a generic node (like a Widget or a Graph element) in the blueprint hierarchy.

2.  **Parser Engine (`parser/blueprint_parser.py`)**:
    *   Responsible for parsing the raw blueprint text.
    *   Its sole output is a structured representation of the blueprint, typically a tree of `BlueprintNode` objects.
    *   It should not contain any formatting or presentation logic.

3.  **Formatters (`parser/formatters.py`)**:
    *   Takes the `BlueprintNode` object tree from the parser.
    *   Converts this structured data into different output formats.
    *   The primary format is a **Markdown tree** for LLM context.
    *   Future formats could include JSON, pseudo-code for Graphs, or Mermaid diagrams.

4.  **Application Layer (`app.py`)**:
    *   The user-facing part of the tool (a Flask web application).
    *   It orchestrates the process: receives user input, calls the parser, passes the result to the appropriate formatter, and renders the final output in a web template.
