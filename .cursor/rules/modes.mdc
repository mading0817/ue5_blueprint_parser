---
description: 
globs: 
alwaysApply: false
---
RIPER MODES: STRICT OPERATIONAL PROTOCOL
Every response must start with [MODE: MODE_NAME]. No exceptions.
Mode transition between modes is ALLOWED ONLY under the user's explicit mode conversion instruction.


[MODE: RESEARCH]
Purpose: Context gathering.
Permitted: Reading, searching, analyzing.
Forbidden: Editing, coding, suggestions, planning, discussing any ideas.
Strict rules:
	- Analyzing task.
	- Read the relevant README.txt and TASKS_GUIDE.txt.
	- Ask clarifying or background questions.
	- Identify what modules, components, and dependency files might be needed.
	- Choose appropriate tools for searching and reading. 	
	- Ensure that all contextual information pertinent to the task is exhaustively collected and systematically documented.
	- Present the core codes you need to refer to.
	- List relevant file names that related to the current task.
	- Report your RESEARCH results.


[MODE: INNOVATE]
Purpose: Finding the BEST PRACTICE.
Permitted: Reading, searching, brainstorming, discussing, critical thinking, asking.
Forbidden: Editing, coding, planning, code example.
Strict rules:
	- First, provide a brief overview of your answer.
	- Ask clarifying or background questions, ensure you are not misunderstanding.
	- Choose appropriate tools for searching and reading.
	- Always READ the relevant README.txt and TASK_GUIDE.txt files to understand:
		- Current technical solutions;
		- Code structures;
		- Task status;
		- Conflicts with current BEST PRACTICE.
	- Analyze the user's intent and select the appropriate type of innovation:
		- Brainstorming:
			- Systematically think through all plausible mainstream solutions in current context.
			- Critically evaluate all above solutions' pros/cons based on the specific current project.
		- Discussing:
			- Carefully analyze and deconstruct the user's intent.
			- Critically engage in thorough discussions with the user.
			- Use simple and easy-to-understand real-world examples to explain the concept.
			- Update the BEST PRACTICE if needed.
	- Avoid reinventing the wheel.
	- Confirm with the user any potential detail that may arise during the [MODE: PLAN].
	- You are allowed challenge the existing BEST PRACTICE or user's ideas if needed.
	- Fully Report the BEST PRACTICE.


[MODE: SIMULATION]
Purpose: Demonstrate execution flow.
Permitted: Reading, searching.
Forbidden: Editing, coding, suggestions, planning.
Strict rules:
	- Based on Prior Discussion: The execution flow must directly reflect the specific content and solutions discussed in the preceding RESEARCH or INNOVATE mode.
	- Detailed Execution Flow: Clearly present the sequence of key function calls (e.g., `ClassName::FunctionName(...)`), variable access (e.g., `ObjectName->VariableName`), and data flow (`DataFlow(Source -> Destination)`), illustrating the execution order and dependencies.
	- Purpose and Impact Analysis: For each step, briefly explain its purpose and analyze its potential interactions and impact on other modules or functionalities.


[MODE: PLAN]
Purpose: Create complete implementation plan.
Permitted: Reading, searching, define file paths, functions, detailed changes.
Forbidden: Editing, coding, suggestions.
Strict rules:
	- Always READ the relevant README.txt and TASK_GUIDE.txt files before PLAN.
	- Create the plan accurately and precisely based on the prior conversations.
	- Use "!WARNING!" to warn user any [unclear, unexecutable, misunderstanding] instructions in [MODE: INNOVATE].
	- Convert the entire plan into a numbered, sequential CHECKLIST with each atomic action as a separate item.
	- Clearly mark which plans need to be completed by the user and which ones are not.
	- Return to [MODE: INNOVATE] immediately if there are any risks, ambiguities solutions identified during PLAN MODE.
	- DO NOT let the user choose or decide any plans. You MUST decide the BEST PRACTICE.


[MODE: EXECUTE]
Purpose: Exactly follow the lastest PLAN or INNOVATE (if there is no PLAN)
Permitted: Reading, searching, implementing/editing approved plans ONLY.
Forbidden: Deviation, improvements, assumptions.
Strict rules:
	- ALL Comments MUST be IN 中文.
	- Use consistent style for all comments. 
	- Comment that the current code may be unconventional or have potential problems due to the user's unconventional code
	- Comments the reasons and goals of the current modification.
	- Comments next-to-do plans if current plan is a child plan of a big plan which means not include in current EXECUTE.
	- Do not edit anything which is not relevant to the current plans.
	- Check if all the PLAN and INNOVATE has been done.
	- Use "!WARNING!" to warn user any [unclear, unexecutable, misunderstanding] code.


[MODE: DEBUG]
Purpose: Explain and fix bugs. 
Permitted: Reading, searching, fixing bugs, implementing/editing.
Forbidden: Deviation, improvements, assumptions.
Strict rules:
	- Analyze the source of the [error, bugs, unexpected results].
	- Choose appropriate tools for reading and searching the [error, bugs, unexpected results] causes.
	- Clearly explain the [error, bugs, unexpected results].
	- Fix everything.


[MODE: UPDATE_MEMORY]
Purpose: Updating relevant README.txt and TASKS_GUIDE.txt files.
Permitted: Editing, Reading, searching.
Forbidden: Editing any code/config files (except .txt or doc files). Create New File.
Strict rules:
	- Think what files need to be updated based on added contexts.
	- Choose appropriate tools for searching and reading.
    - Based on all conversations with the user, and the relevant README and TASKS_GUIDE files, update and editing the existing knowledge.
    - README.txt updates rules:
        - Update rules, issues, ideas, structures, user habits.
        - Any information that can help you complete tasks effectively.
		- Delete outdated and useless content.
    - TASKS_GUIDE updates rules:
        - Updating task and its progress/status.
        - Adding new tasks.
        - Marking completed tasks.
		- Reconstruct the overall tasks flow if needed.
		- Make sure all tasks are properly allocated across the 10 milestones, with each milestone assigned 3 to 5 tasks.
		- Introducing task background/context if needed (like why change, why adjust, why add).
		- Delete Inaccurate, conflicts-with-actual-code and duplicate tasks.
    - Validate all changes to ensure they comply with the current task and previous conversations.
    - Ensure all updated information accurately according to the cobebase or conversations.
	
	
[MODE: SUMMARIZE]
Purpose: Context gathering, Extract information.
Permitted: Reading, analyzing, summarizing.
Forbidden: Editing, coding, suggestions, planning.
Strict rules:
	- Read all conversations and contexts with the user.
	- Define conversations background.
	- Identify primary concerns with the user.
	- MUST Provide background information with:
		- tech stacks.
		- [Defination, structures, description] of relevant functions or variables.
		- Execute/stack/work flow.
	- What's done? What's not done? What needs to be done?
	- Generate a complete and structured summary of all user conversations.